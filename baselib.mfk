// THE BASE LIBRARY

// Useful routines mainly output video
import setup
import input
import stdio

//===========================================================
// BANKING
//===========================================================
void kernal() {
    poke($9F60, 0)
}

void BASIC() {
    poke($9F60, 4) //basic
}

byte ramBank(byte b) {
    byte old
    old = peek($9F61)
    poke($9F61, b)
    return old
}

//===========================================================
// GFX CONSTANTS AND BASIS
//===========================================================
const byte geo8by8 = $0
const byte geo16by16 = $3
const byte geoMap32by32 = $0
const byte geoMap64by64 = $A

const byte geoBig = geoMap32by32 | ((geo16by16) << 4)
const byte geoSmall = geoMap64by64 | ((geo8by8) << 4)

const byte geo4bppMap = $3

//-----------------------------
const word bigBaseMap = $0000 //bottom of VRAM
const word bigSizeMap = 32 * 28 //no *2 as 17:1 address
const word smallBaseMap = bigBaseMap + bigSizeMap
const word smallSizeMap = bigSizeMap * 4 //as quad density of tiles

const word smallBasePix = smallBaseMap + smallSizeMap
const word smallGlyphStep = 64 >> 2 //div by 4 as 17:1 @ 4bpp
const word smallSizePix = ((96 * 2) + 32 + 8) * smallGlyphStep

const word bigBasePix = smallBasePix + smallSizePix
const word bigGlyphStep = 256 >> 2 //div by 4 as 17:1 @ 4bpp

//This should be then end of memory
//Now to align numbering placing big font @ 128+
//leaving 128 low (0-127) glyph "control codes"
//This aligns higher glyphs for direction control
//Assume modulo 17 bit encoding
const word bigPixAlign = bigBasePix - (128 * bigGlyphStep) //should be 0
//There are 24 non printing placing logo in 25-31 char spots
const word smallPixAlign = smallBasePix - (24 * smallGlyphStep) //should be 4096

//===========================================================
// INIT AND CLEAN
//===========================================================
void initGeneral() {
    kernal()
    ramBank(0)
    //poke($9F25, 0) //init VERA 0
    //vinit(512, 448, 0) //set visible area
    //initialize layers
    //setLayer(0, geo4bppMap, geoBig, bigBaseMap, bigPixAlign)
    fileOpen("GFX.BMP"z) //open graphics
    byte i
    for i, 1, to, 255 {
        putword(fileInput())
    }
    //loadHeadPal()
    //loadBigMap() //fill with all glyphs

    fileClose()
    //forground text layer
    if not(smallOff) {//small layer bypass for tests
        setLayer(1, geo4bppMap, geoSmall, smallBaseMap, smallPixAlign)
        clearSmallMap(32, 0) //spaces
        testBorder()
    }
}

void shutdownGeneral() {
    BASIC()

    //not sure about this as it could be used as a BMP loader
    asm {
        jmp ($FFFC) //reset
    }
}

//===========================================================
// BIT MANIPULATION ROUTINES
//===========================================================
byte hiNibLo(byte nib) {
    return nib >> 4
}

byte lowNibHi(byte nib) {
    return nib << 4
}

inline byte signLo(sbyte b) {
    if b < 0 {
        return 1
    }
    return 0
}

inline byte lsbHi(byte b) {
    if (b & 1) != 0 {
        return $80
    }
    return 0
}

inline void skipReg() {
    peek($9F23)
}

//===========================================================
// VERA LOW LEVEL VIDEO (uses 17:1 bit aligned word refs)
//===========================================================
void vaddr(word low) {//for main display word aligned
    poke($9F20, low.lo << 1) 
    poke($9F21, (low.hi << 1) | signLo(low.lo))
    poke($9F22, signLo(low.hi) | $10) //128 kB high bit step of 1
}

void caddr(word low) {//for palette and other VERA
    vaddr(low)
    poke($9F22, $1F) //and access all high ram aligned word
}

void stride(word inc) {//stride over number
    word val
    val = peek($9F21):peek($9F20) //maps in low mem (for maps only!)
    val = val + inc
    poke($9F20, val.lo)
    poke($9F21, val.hi)
}

void voke(word w) {
    poke($9F23, w.lo) //poke VERA port
    poke($9F23, w.hi) //and the high byte
}

void bvoke(byte b) {
    poke($9F23, b)
}

void setLayer(byte layer, byte mode, byte geo, word map, word tile) {
    word base
    base = $1000
    if layer != 0 {
        base += $800
    }
    caddr(base) //ready
    bvoke((mode << 5) | 1) //set
    bvoke(geo)
    voke(map >> 1)
    voke(tile >> 1)
    voke(0) //scroll H
    voke(0) //scroll V
}

void setScroll(byte layer, word x, word y) { //+ve UP/LEFT
    word base = $1000 + $6 //directly to scroll registers
    if layer != 0 {
        base += $800
    }
    caddr(base)
    voke(x)
    voke(y)
}

//===========================================================
// VERA HIGH LEVEL VIDEO
//===========================================================
void vinit(word w, word h, byte bord) {
    setBorder(bord)
    word hw
    hw = (640 - w) >> 1
    bvoke(hw.lo) //start
    byte hibit
    //w -= 1 //seems to be an offset showing one last line
    hibit = ((hw.hi + w.hi) << 2) + hw.hi//put high bit in
    bvoke(hw.lo + w.lo) //stop modulo
    hw = (480 - h) >> 1
    word irq
    irq = hw + h
    bvoke(hw.lo) //start
    //h -= 1 //yes a last line residual
    bvoke(hw.lo + h.lo) //stop
    hibit = ((((hw.hi + h.hi) << 1) + hw.hi) << 4) + hibit
    bvoke(hibit) //the high bits of the range
    //IRQ?
    voke(irq) //set irq line
}

void setBorder(byte bord) {
    caddr(0)
    skipReg() //read over
    voke($8080) //basic 1:1 pixel clock scaling (maybe later)
    bvoke(bord) //set border
}

void setPal(byte idx, byte r, byte g, byte b) {
    caddr($800 + idx) //word aligned
    bvoke(lowNibHi(r) | g)
    bvoke(b) //and maybe alpha later?
}

void plotQuad(byte qx, word y, word quad) {//quarter x
    word base
    base = bigBasePix
    word inside
    inside = (qx & $3) | ((y & $F) << 2) //inside a glyph address
    word glyph
    glyph = ((qx >> 2) | ((y & $FFF0) << 1)) + 128 //and glyph number
    //glyph starts 4 in
    base = base + (glyph << 6) //for multiply 64 to be 17:1 4bpp
    base = base + inside //for 17:1 address
    vaddr(base)
    voke(quad)
}

//===========================================================
// VERA TEST AND UTILITY ROUTINES
//===========================================================
void loadBigMap() {
    vaddr(bigBaseMap)
    word size
    for size, 128, to, 1023 {//128 chars + 768 glyphs (as 256 * 3 directions)
        voke(size) //not in lo range
    }
    loadGfxBig()
}

void clearSmallMap(word init, word inc) {
    vaddr(smallBaseMap)
    word size
    for size, 1, to, smallSizeMap {
        voke(init)
        init = init + inc
    }
}

void drawStride(word from, word inc, word end, word mod) {
    mod = (mod << 1) - 2 //in cells 
    while from < end { //upto not including
        //already positioned
        voke(from)
        from = from + inc
        stride(mod)
    }
}

void testBorder() {
    vaddr(smallBaseMap)
    drawStride(32, 1, 32 + 64, 1) //top
    drawStride(96, 1, 96 + 55, 64) //left
    drawStride(151, 1, 151 + 63, 1) //bottom
    drawStride(214, 1, 214 - 13 + 54, -64) //right (268? => 256)
    drawStride(24, 1, 32, -1) //draw a G hook
}

//===========================================================
// VERA BMP FILE LOADERS
//===========================================================
void loadHeadPal() {
    fileSkipChar(14) //header
    fileSkipChar(40) //BITMAPINFOHEADER (older - NO COMPRESSION)
    //now at colour table
    byte colour
    byte blue
    byte green
    byte red
    for colour, 0, to, 255 {
        blue = fileInput()
        green = fileInput()
        red = fileInput()
        fileInput() //alpha
        setPal(colour, hiNibLo(red), hiNibLo(green), hiNibLo(blue))
    }
}

void loadGfxBig() {
    //now at bitmap (note bottom left to right row first)
    //load big glyphs
    byte x
    word y
    word colour
    for y, 447, downto, 0 {//size of big glyph section
        for x, 0, to, 127 {//in quads
            colour.hi = lowNibHi(fileInput()) //nibble mod
            colour.hi = colour.hi | (fileInput() & $F)
            colour.lo = lowNibHi(fileInput()) //nibble mod
            colour.lo = colour.lo | (fileInput() & $F)
            plotQuad(x, y, colour) //for alignment issue
        }
    }//that really should draw all 1024-128 glyph positions with paint
}

