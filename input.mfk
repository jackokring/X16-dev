//THE INPUT LIBRAY

import setup

//===========================================================
// JOYPAD
//===========================================================
byte readJoy() {
    asm {
        jsr $FF06 //gotjoy
    }
    return direction(0) //might as well return the default control
}

// 5, 6, 7
// 4, 8, 0
// 3, 2, 1
const byte DIR_R = 0
const byte DIR_RD = 1
const byte DIR_D = 2
const byte DIR_LD = 3
const byte DIR_L = 4
const byte DIR_LU = 5
const byte DIR_U = 6
const byte DIR_RU = 7
const byte DIR_X = 8

const byte DIR_TXT = 15 //a pseudo direction for compressed map

const array(byte) udlrTable = [
    DIR_X, DIR_R, DIR_L, DIR_X,
    DIR_D, DIR_RD, DIR_LD, DIR_X,
    DIR_U, DIR_RU, DIR_LU, DIR_X,
    DIR_X, DIR_X, DIR_X, DIR_X
]

const byte BUT_A = $80
const byte BUT_B = $40
const byte BUT_SEL = $20
const byte BUT_STA = $10
//JOY1 ($02BC-$02BE) and JOY2 ($02BF-$02C1)
//| A | B |SEL|STA|UP |DN |LT |RT |
byte direction(byte num) {
    byte val
    val = peek($02BC)
    if num == 0 {
        val = peek($02BF)
    }
    //and buttons as usual
    return udlrTable[val & $F] | (val & $F0)
}

//===========================================================
// FILE OPEN, INPUT AND CLOSE
//===========================================================
//$FF90: SETMSG – set verbosity
//$FFB7: READST – return status byte
//$FFBA: SETLFS – set LA, FA and SA
//$FFBD: SETNAM – set filename
//$FFC0: OPEN – open a channel
//$FFC3: CLOSE – close a channel
//$FFC6: CHKIN – set channel for character input
//$FFC9: CHKOUT – set channel for character output
//$FFCC: CLRCHN – restore character I/O to screen/keyboard
//$FFCF: BASIN – get character (CHRIN)
//$FFD2: BSOUT – write character
//$FFD5: LOAD – load a file into memory
//$FFD8: SAVE – save a file from memory
//$FFE7: CLALL – close all channels
void fileOpenGfx() {
    const array(byte) name = "gfx.bmp"
    const byte low = name.addr.lo
    const byte high = name.addr.hi
    const byte size = sizeof(name)
    asm {
        LDA #0 //off all printing
        JSR $FF90 //SETMSG
        LDA #size //name length
        LDY #high //string address
        LDX #low
        JSR $FFBD //SETNAM
        LDA #1 //hendle
        LDX #8 //device intercept flash
        LDY #255 //no extra command
        JSR $FFBA //SETLFS
        JSR $FFC0 //OPEN
        //prepare for input
        LDX #1
        JSR $FFC6 //CHKIN
    }
}

byte seqRand = 0

byte fileInput() {
    byte data
    asm {
        JSR $FFCF //CHRIN
        STA data
    }
    if fileReadOff {
        seqRand = seqRand + 17
        return seqRand //white? assuming null file zero
    }
    return data
}

void fileSkipChar(word skip) {
    word i
    for i, 1, to, skip {
        fileInput()
    }
}

void fileClose() {
    asm {
        LDA #1
        JSR $FFC3 //CLOSE
        JSR $FFCC //CLRCHN
    }
}